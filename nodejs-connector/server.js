const express = require('express');
const { SessionsClient } = require('@google-cloud/dialogflow-cx');
const { VertexAI } = require('@google-cloud/vertexai');
const MessagingResponse = require('twilio').twiml.MessagingResponse;
const path = require('path');
const bodyParser = require('body-parser');

require('dotenv').config();

const app = express();
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());

// --- Clientes das APIs ---
const dialogflowClient = new SessionsClient({ apiEndpoint: `us-central1-dialogflow.googleapis.com` });
const vertex_ai = new VertexAI({ project: process.env.PROJECT_ID, location: 'us-central1' });
const generativeModel = vertex_ai.getGenerativeModel({ model: 'gemini-2.5-flash' });

// --- Armazenamento de Hist√≥rico e Estado da Conversa ---
const conversationHistory = {};
const conversationState = {}; // Objeto para guardar o estado de cada conversa
const flowContext = {}; // Guarda o contexto do fluxo pausado (ex: a √∫ltima pergunta)

const mainPrompt = `
Voc√™ √© a Vivi, uma assistente de viagens virtual da ag√™ncia 'Viaje F√°cil Brasil'. Sua personalidade √© amig√°vel, proativa e extremamente prestativa.
Seu objetivo √© conversar com o usu√°rio para entender suas necessidades de viagem. Voc√™ pode dar sugest√µes, falar sobre pacotes promocionais e responder a perguntas gerais.

Quando voc√™ identificar que o usu√°rio est√° pronto para fazer uma cota√ß√£o e voc√™ precisa coletar informa√ß√µes estruturadas (como origem, destino, datas, etc.), sua tarefa √© avis√°-lo que voc√™ vai iniciar a coleta de dados e, em seguida, retornar um comando especial para o sistema.

**Regras de Resposta:**
1.  **Conversa Natural:** Converse normalmente com o usu√°rio.
2.  **Seja Decisiva:** Se o usu√°rio expressar um desejo claro de obter uma cota√ß√£o (usando palavras como "cotar", "pre√ßo", "quanto custa"), voc√™ DEVE retornar o JSON de a√ß√£o imediatamente.
3.  **Extrair Par√¢metros:** Analise a frase do usu√°rio e extraia qualquer informa√ß√£o que corresponda aos seguintes par√¢metros: 
    - Passagens A√©reas: person, origem, destino, data_ida, data_volta, passageiros, perfil_viagem, preferencias.
    - Cruzeiros: person, destino_cruzeiro, porto_embarque, periodo, adultos_cruzeiro, numero_criancas, idade_crianca, companhia_cruzeiro, acessibilidade_cruzeiro, status_tarifa_senior.
4.  **Priorize o Nome:** Se o usu√°rio se apresentar (ex: "meu nome √©...", "sou o...", "me chamo..."), voc√™ DEVE obrigatoriamente extrair o nome dele e inclu√≠-lo no par√¢metro "person".
5.  **Formato do JSON de A√ß√£o:** O JSON deve ser a **√öNICA COISA** na sua resposta. A estrutura √©:
    {
      "action": "NOME_DA_ACAO",
      "response": "Sua frase de transi√ß√£o.",
      "parameters": { // Campo opcional com os par√¢metros extra√≠dos
        "nome_do_parametro": "valor_extraido"
      }
    }
6.  **Nomes de A√ß√£o V√°lidos:** "iniciar_cotacao_passagem", "iniciar_cotacao_cruzeiro".

**Exemplos de Intera√ß√£o:**

EXEMPLO 1 (Passagem Simples):
Usu√°rio: queria cotar uma passagem pra Fortaleza
Vivi: (RETORNA APENAS O JSON ABAIXO)
\`\`\`json
{
  "action": "iniciar_cotacao_passagem",
  "response": "Com certeza! Fortaleza √© um destino maravilhoso! Para te ajudar a encontrar as melhores passagens, vou iniciar nosso assistente de cota√ß√£o. √â bem rapidinho!",
  "parameters": {
    "destino": "Fortaleza"
  }
}
\`\`\`

EXEMPLO 2 (Passagem com Nome e Data):
Usu√°rio: Oi, meu nome √© Eduardo e eu queria ver o pre√ßo de um voo para o Rio de Janeiro saindo dia 10 de maio.
Vivi: (RETORNA APENAS O JSON ABAIXO)
\`\`\`json
{
  "action": "iniciar_cotacao_passagem",
  "response": "Ol√°, Eduardo! Claro, vamos cotar sua passagem para o Rio. Vou iniciar nosso assistente para coletar os √∫ltimos detalhes.",
  "parameters": {
    "person": "Eduardo",
    "destino": "Rio de Janeiro",
    "data_ida": "10/05/2025"
  }
}
\`\`\`

EXEMPLO 3 (Passagem com Nome e Per√≠odo):
Usu√°rio: Oi, meu nome √© Eduardo e eu queria ver o pre√ßo de um voo para o Rio de Janeiro saindo no melhor valor em maio.
Vivi: (RETORNA APENAS O JSON ABAIXO)
\`\`\`json
{
  "action": "iniciar_cotacao_passagem",
  "response": "Ol√°, Eduardo! Claro, vamos cotar sua passagem para o Rio. Vou iniciar nosso assistente para coletar os √∫ltimos detalhes.",
  "parameters": {
    "person": "Eduardo",
    "destino": "Rio de Janeiro",
    "periodo": "melhor valor em maio"
  }
}
\`\`\`

EXEMPLO 4 (Cruzeiro com Detalhes):
Usu√°rio: Queria saber o pre√ßo de um cruzeiro pela costa brasileira para 2 adultos, saindo de Santos.
Vivi: (RETORNA APENAS O JSON ABAIXO)
\`\`\`json
{
  "action": "iniciar_cotacao_cruzeiro",
  "response": "√ìtima ideia! Um cruzeiro pela nossa costa √© incr√≠vel. Vou iniciar o assistente para montarmos a viagem perfeita para voc√™s!",
  "parameters": {
    "destino_cruzeiro": "Costa Brasileira",
    "adultos_cruzeiro": "2",
    "porto_embarque": "Santos"
  }
}
\`\`\`

EXEMPLO 5 (Cruzeiro com Detalhes e Per√≠odo):
Usu√°rio: Queria saber o pre√ßo de um cruzeiro pela costa brasileira para 2 adultos, saindo de Santos em fevereiro do pr√≥ximo ano.
Vivi: (RETORNA APENAS O JSON ABAIXO)
\`\`\`json
{
  "action": "iniciar_cotacao_cruzeiro",
  "response": "√ìtima ideia! Um cruzeiro pela nossa costa √© incr√≠vel. Vou iniciar o assistente para montarmos a viagem perfeita para voc√™s!",
  "parameters": {
    "destino_cruzeiro": "Costa Brasileira",
    "adultos_cruzeiro": "2",
    "porto_embarque": "Santos",
    "periodo": "fevereiro do pr√≥ximo ano"
  }
}
\`\`\`

EXEMPLO 6 (Consulta Aberta):
Usu√°rio: Oi, tem alguma promo√ß√£o de pacote de viagem?
Vivi: Ol√°! Temos sim! üéâ Temos um pacote incr√≠vel para a Patag√¥nia em setembro, com tudo incluso. Tamb√©m temos uma super promo√ß√£o para resorts em fam√≠lia no nordeste. Voc√™ tem interesse em algum desses ou prefere outro tipo de viagem?
`;

// ‚ñº‚ñº‚ñº ADICIONE ESTA FUN√á√ÉO ‚ñº‚ñº‚ñº
function isGenericQuestion(text) {
    const questionWords = ['quem', 'qual', 'quais', 'onde', 'quando', 'como', 'por que', 'porque', 'o que', 'me diga', 'me conte', 'queria saber', 'poderia me dizer', 'voc√™ sabe', 'voc√™ pode me contar', 'gostaria de saber', 'voc√™ conhece', 'voc√™ tem informa√ß√µes sobre', 'veja', 'olha', 'escuta', 'escute', 'me fale', 'me fale sobre'];
    if (!text) return false;
    const lowerCaseText = text.toLowerCase().trim();

    // Se terminar com '?', √© uma pergunta.
    if (lowerCaseText.endsWith('?')) {
        return true;
    }

    const words = lowerCaseText.split(' ');
    // Se a primeira palavra for de pergunta, √© uma pergunta.
    if (questionWords.includes(words[0])) {
        return true;
    }

    // Se a segunda palavra for de pergunta (para casos como "e quem...", "mas qual..."), √© uma pergunta.
    if (words.length > 1 && questionWords.includes(words[1])) {
        return true;
    }

    return false;
}

// --- FUN√á√ïES AUXILIARES (CORRIGIDAS E PRESENTES) ---

const twilioToDetectIntent = (req) => {
    const sessionId = req.body.From.replace('whatsapp:', '');
    const sessionPath = dialogflowClient.projectLocationAgentSessionPath(
        process.env.PROJECT_ID, 'us-central1', process.env.AGENT_ID, sessionId
    );

    const request = {
        session: sessionPath,
        queryInput: {
            text: { text: req.body.Body },
            languageCode: process.env.LANGUAGE_CODE,
        },
        // ‚ñº‚ñº‚ñº GARANTINDO QUE O PAR√ÇMETRO DE ORIGEM SEJA ENVIADO ‚ñº‚ñº‚ñº
        queryParams: {
            parameters: {
                fields: {
                    source: {
                        stringValue: 'WHATSAPP',
                        kind: 'stringValue'
                    }
                }
            }
        }
    };
    return request;
};

const detectIntentToTwilio = (dialogflowResponse) => {
    const replies = dialogflowResponse.queryResult.responseMessages
        .filter(responseMessage => responseMessage.text)
        .map(responseMessage => responseMessage.text.text.join('\n'))
        .join('\n');

    const twiml = new MessagingResponse();
    if (replies) {
        twiml.message(replies);
    }
    return twiml;
};

// Fun√ß√£o para chamar o Dialogflow com um evento e um par√¢metro
async function triggerDialogflowEvent(eventName, sessionId, produto, params = {}) {
    const sessionPath = dialogflowClient.projectLocationAgentSessionPath(
        process.env.PROJECT_ID, 'us-central1', process.env.AGENT_ID, sessionId
    );

    // ‚ñº‚ñº‚ñº CORRE√á√ÉO APLICADA AQUI ‚ñº‚ñº‚ñº
    // Adiciona o produto aos outros par√¢metros antes de construir o objeto final
    params.produto_escolhido = produto;

    const fields = {};
    for (const key in params) {
        if (params[key]) {
            fields[key] = { stringValue: params[key], kind: 'stringValue' };
        }
    }

    // ‚ñº‚ñº‚ñº CORRE√á√ÉO APLICADA AQUI ‚ñº‚ñº‚ñº
    // Adiciona o par√¢metro 'source' junto com os outros par√¢metros da IA
    fields.source = { stringValue: 'WHATSAPP', kind: 'stringValue' };

    const queryParams = { parameters: { fields } };

    const request = {
        session: sessionPath,
        queryInput: {
            event: { event: eventName },
            languageCode: process.env.LANGUAGE_CODE
        },
        queryParams: queryParams
    };

    console.log(`Disparando evento: ${eventName} com produto: ${produto} e com par√¢metros:`, params);
    console.log('DEBUG: Enviando os seguintes queryParams:', JSON.stringify(request.queryParams, null, 2));
    conversationState[sessionId] = 'in_flow';
    console.log(`Estado da conversa para ${sessionId} definido como 'in_flow'`);
    const [response] = await dialogflowClient.detectIntent(request);
    return response;
}

// --- ROTA PRINCIPAL ---
app.post('/', async (req, res) => {
    // --- ETAPA 1: INICIALIZA√á√ÉO ---
    // Coleta a entrada do usu√°rio e o ID da sess√£o.
    // Garante que os objetos de estado e hist√≥rico existam para este usu√°rio.
    const userInput = req.body.Body;
    const sessionId = req.body.From.replace('whatsapp:', '');

    if (!conversationState[sessionId]) {
        conversationState[sessionId] = 'ia'; // O estado padr√£o √© conversando com a IA
    }
    if (!conversationHistory[sessionId]) {
        conversationHistory[sessionId] = [];
    }

    try {
        let responseToSend = "";

        // --- ETAPA 2: L√ìGICA DE ESTADO ---

        // ESTADO "PAUSED": O fluxo foi interrompido por uma pergunta.
        // O bot est√° esperando um "sim" para continuar de onde parou.
        if (conversationState[sessionId] === 'paused') {
            if (userInput.toLowerCase().trim() === 'sim') {
                console.log('Usu√°rio confirmou o retorno ao fluxo.');
                conversationState[sessionId] = 'in_flow'; // Retorna ao modo de fluxo

                // Pega a √∫ltima pergunta que o bot fez e a envia novamente.
                responseToSend = flowContext[sessionId]?.lastBotQuestion || "Ok, continuando... Qual era a informa√ß√£o que voc√™ ia me passar?";
            } else {
                // Se o usu√°rio n√£o disse "sim", ele provavelmente fez outra pergunta.
                // A IA responde e depois pergunta novamente se pode voltar ao fluxo.
                console.log('Usu√°rio n√£o quer voltar ao fluxo. Acionando IA...');
                const result = await generativeModel.generateContent({ contents: [{ role: 'user', parts: [{ text: userInput }] }] });
                const geminiText = (await result.response).candidates[0].content.parts[0].text;
                responseToSend = `${geminiText}\n\nQuando quiser, me diga 'sim' para continuarmos a cota√ß√£o.`;
            }

            // ESTADO "IN_FLOW": O usu√°rio est√° no meio de um fluxo de coleta de dados.
        } else if (conversationState[sessionId] === 'in_flow') {
            // Mesmo em fluxo, primeiro verificamos se o usu√°rio fez uma pergunta gen√©rica.
            if (isGenericQuestion(userInput)) {
                console.log('Pergunta gen√©rica detectada no meio do fluxo. Pausando fluxo e acionando IA...');
                conversationState[sessionId] = 'paused'; // PAUSA o fluxo

                // Envia a pergunta para a IA responder.
                const result = await generativeModel.generateContent({ contents: [{ role: 'user', parts: [{ text: userInput }] }] });
                const geminiText = (await result.response).candidates[0].content.parts[0].text;

                // Monta a resposta da IA + a pergunta de retomada.
                responseToSend = `${geminiText}\n\nPodemos voltar para a sua cota√ß√£o agora? (responda 'sim' para continuar)`;

            } else {
                // Se n√£o for uma pergunta, √© uma resposta para o fluxo. Envia para o Dialogflow.
                console.log('N√£o √© pergunta gen√©rica. Enviando para o Dialogflow continuar o fluxo...');
                const dialogflowRequest = twilioToDetectIntent(req);
                const [dialogflowResponse] = await dialogflowClient.detectIntent(dialogflowRequest);

                // ‚ñº‚ñº‚ñº LOG DE DIAGN√ìSTICO 1: O QUE O DIALOGFLOW RESPONDEU? ‚ñº‚ñº‚ñº
                console.log('DEBUG: Resposta completa do Dialogflow:', JSON.stringify(dialogflowResponse, null, 2));

                const responseToSend = (dialogflowResponse.queryResult.responseMessages || [])
                    .filter(m => m.text && m.text.text.length > 0)
                    .map(m => m.text.text.join('\n'))
                    .join('\n');

                // ‚ñº‚ñº‚ñº LOG DE DIAGN√ìSTICO 2: O QUE ESTAMOS PRESTES A ENVIAR? ‚ñº‚ñº‚ñº
                console.log(`DEBUG: Mensagem final a ser enviada para o Twilio: "${responseToSend}"`);


                if (responseToSend) {
                    console.log(`Enviando resposta do Dialogflow: "${responseToSend}"`);

                    // Guarda a pergunta atual do bot para o caso de precisarmos pausar no futuro.
                    flowContext[sessionId] = { lastBotQuestion: responseToSend };

                    res.type('text/xml').send(twimlResponse.toString());
                } else {
                    // Se n√£o houver texto, significa que o Dialogflow apenas processou uma a√ß√£o interna.
                    // Encerramos a requisi√ß√£o com 200 OK para a Twilio saber que recebemos, mas n√£o respondemos nada.
                    console.log('Dialogflow processou a entrada, mas n√£o h√° mensagem para enviar. Aguardando pr√≥ximo passo.');
                    res.status(200).send();
                }

                // Verifica se o Dialogflow enviou o sinal de que o fluxo terminou.
                const customPayload = dialogflowResponse.queryResult.responseMessages.find(m => m.payload?.fields?.flow_status);
                if (customPayload) {
                    const flowStatus = customPayload.payload.fields.flow_status.stringValue;
                    if (flowStatus === 'finished' || flowStatus === 'cancelled_by_user') {
                        console.log(`Sinal de '${flowStatus}' detectado. Resetando estado e hist√≥rico.`);
                        delete conversationState[sessionId];
                        delete conversationHistory[sessionId];
                        delete flowContext[sessionId];
                    }
                }
            }

            // ESTADO "ia": A IA est√° no controle para ter uma conversa aberta e decidir quando iniciar um fluxo.
        } else {
            console.log('IA no controle. Verificando inten√ß√£o do usu√°rio...');
            const chat = generativeModel.startChat({
                history: conversationHistory[sessionId],
                systemInstruction: { role: 'system', parts: [{ text: mainPrompt }] }
            });
            const result = await chat.sendMessage(userInput);
            const geminiResponseText = (await result.response).candidates[0].content.parts[0].text;

            let actionJson = null;
            try {
                const jsonMatch = geminiResponseText.match(/\{[\s\S]*\}/);
                if (jsonMatch) actionJson = JSON.parse(jsonMatch[0]);
            } catch (e) { }

            // Se a IA retornou um JSON de a√ß√£o, inicia o fluxo.
            if (actionJson && actionJson.action) {
                console.log(`A√ß√£o detectada: ${actionJson.action}`);
                conversationState[sessionId] = 'IN_FLOW';
                const transitionMessage = actionJson.response || "Ok, vamos come√ßar!";
                const parameters = actionJson.parameters || {};
                const produto = actionJson.action.includes('passagem') ? 'passagem' : 'cruzeiro';

                const dialogflowResponse = await triggerDialogflowEvent('iniciar_cotacao', sessionId, produto, parameters);
                const flowFirstMessage = (dialogflowResponse.queryResult.responseMessages || [])
                    .filter(m => m.text && m.text.text.length > 0)
                    .map(m => m.text.text.join('\n'))
                    .join('\n');

                responseToSend = `${transitionMessage}${flowFirstMessage ? `\n\n${flowFirstMessage}` : ''}`;
                if (flowFirstMessage) {
                    flowContext[sessionId] = { lastBotQuestion: flowFirstMessage };
                }
            } else {
                // Se n√£o, √© uma conversa normal.
                responseToSend = geminiResponseText;
            }
        }

        // Salva a intera√ß√£o no hist√≥rico para dar contexto para a IA.
        conversationHistory[sessionId].push({ role: "user", parts: [{ text: userInput }] });
        conversationHistory[sessionId].push({ role: "model", parts: [{ text: responseToSend }] });

        // Envia a resposta final para o WhatsApp.
        const twiml = new MessagingResponse();
        twiml.message(responseToSend);
        res.type('text/xml').send(twiml.toString());

    } catch (error) {
        console.error('ERRO GERAL NO WEBHOOK:', error);
        const errorTwiml = new MessagingResponse();
        errorTwiml.message('Desculpe, ocorreu um problema e n√£o consigo responder agora.');
        res.status(500).type('text/xml').send(errorTwiml.toString());
    }
});

const listener = app.listen(process.env.PORT || 8080, () => {
    console.log(`Seu servidor est√° a ouvir na porta ${listener.address().port}`);
});