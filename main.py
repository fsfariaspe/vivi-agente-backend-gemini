import os
import psycopg2
import functions_framework
from flask import jsonify

# --- Configura√ß√£o do Banco de Dados ---
DB_HOST = os.getenv("DB_HOST")
DB_NAME = os.getenv("DB_NAME")
DB_USER = os.getenv("DB_USER")
DB_PASSWORD = os.getenv("DB_PASSWORD")

# --- L√≥gica de Conex√£o Otimizada ---
conn = None

def get_db_connection():
    """Retorna uma conex√£o com o banco de dados, criando uma se n√£o existir."""
    global conn
    if conn is None or conn.closed:
        try:
            conn = psycopg2.connect(
                dbname=DB_NAME,
                user=DB_USER,
                password=DB_PASSWORD,
                host=DB_HOST,
                port="5432",
                sslmode="require"
            )
            print("üü¢ Conex√£o com o PostgreSQL estabelecida.")
        except Exception as e:
            print(f"‚ùå Erro CR√çTICO ao conectar ao PostgreSQL: {e}")
            conn = None
    return conn

# Inicializa a conex√£o na primeira execu√ß√£o
get_db_connection()


@functions_framework.http
def identificar_cliente(request):
    """
    Fun√ß√£o final: acionada pelo Dialogflow, verifica se o cliente √© recorrente
    no banco de dados e retorna a sauda√ß√£o apropriada.
    """
    texto_resposta = "" # Vari√°vel para armazenar nossa resposta final
    
    try:
        # Pega o n√∫mero de telefone do payload enviado pelo Dialogflow
        session_path = request.get_json(silent=True).get('sessionInfo', {}).get('session', '')
        numero_cliente_com_prefixo = session_path.split('/')[-1]
        
        # Limpa o n√∫mero para consulta no banco
        numero_cliente = ''.join(filter(str.isdigit, numero_cliente_com_prefixo))
        if numero_cliente.startswith('55'): # L√≥gica para formatar para o padr√£o E.164
            numero_cliente = f"+{numero_cliente}"

        print(f"üîé Verificando cliente para o n√∫mero: {numero_cliente}")

        db_conn = get_db_connection()
        if db_conn:
            cur = db_conn.cursor()
            # Busca o nome do cliente mais recente para este n√∫mero
            cur.execute(
                "SELECT nome_cliente FROM conversas WHERE numero_cliente = %s AND nome_cliente IS NOT NULL ORDER BY data_inicio DESC LIMIT 1",
                (numero_cliente,)
            )
            resultado = cur.fetchone()
            cur.close()

            if resultado and resultado[0]:
                nome_cliente = resultado[0]
                print(f"‚úÖ Cliente encontrado: {nome_cliente}")
                texto_resposta = f"Ol√°, {nome_cliente}! Que bom te ver de volta aqui na Viaje F√°cil Brasil üòä Como posso te ajudar a planejar sua pr√≥xima viagem?"
            else:
                print("‚ö†Ô∏è Cliente n√£o encontrado no banco. Usando sauda√ß√£o padr√£o.")
                texto_resposta = "Ol√°! Que bom te ver por aqui üòä Eu sou a Vivi, sua consultora de viagens virtual. Para um atendimento mais atencioso, pode me dizer seu nome, por favor?"
        else:
            # Fallback caso a conex√£o com o banco tenha falhado na inicializa√ß√£o
            print("‚ö†Ô∏è Conex√£o com o banco indispon√≠vel. Usando sauda√ß√£o de fallback.")
            texto_resposta = "Ol√°! Eu sou a Vivi, sua consultora de viagens virtual. Como posso te ajudar?"

    except Exception as e:
        print(f"‚ùå Erro inesperado na execu√ß√£o da fun√ß√£o: {e}")
        texto_resposta = "Ol√°! Sou a Vivi. Parece que estou com um pequeno problema em meus sistemas, mas me diga, como posso te ajudar hoje?"

    # Monta a resposta final no formato que o Dialogflow espera
    response_payload = {
        "fulfillment_response": {
            "messages": [
                {
                    "text": {
                        "text": [texto_resposta]
                    }
                }
            ]
        }
    }
    
    return jsonify(response_payload)