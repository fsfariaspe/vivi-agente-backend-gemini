# main.py (VERS√ÉO ASS√çNCRONA FINAL com Flask)
import os
import json
import logging
import pytz
from datetime import datetime
from twilio.rest import Client

from flask import Flask, request, jsonify
from google.cloud import tasks_v2
import psycopg2

from notion_utils import create_notion_page
from db import salvar_conversa, buscar_nome_cliente

# --- Configura√ß√µes Iniciais ---
logger = logging.getLogger(__name__)

# 1. Inicializa a aplica√ß√£o Flask
app = Flask(__name__)

# 2. Configura√ß√µes do Google Cloud
PROJECT_ID = os.getenv("GCP_PROJECT_ID")
LOCATION_ID = os.getenv("GCP_LOCATION_ID")
QUEUE_ID = os.getenv("CLOUD_TASKS_QUEUE_ID")
SERVICE_ACCOUNT_EMAIL = os.getenv("GCP_SERVICE_ACCOUNT_EMAIL")
tasks_client = tasks_v2.CloudTasksClient()


# --- PORTA DE ENTRADA 1: Webhook para o Dialogflow ---
@app.route('/', methods=['POST'])
def vivi_webhook():
    """
    Fun√ß√£o "ATENDENTE": Chamada APENAS pelo Dialogflow.
    Responde r√°pido e delega o trabalho demorado.
    """
    request_json = request.get_json(silent=True)
    tag = request_json.get('fulfillmentInfo', {}).get('tag', '')
    
    # ... (A l√≥gica para 'identificar_cliente' e 'salvar_nome' continua a mesma) ...
    
    if tag == 'salvar_dados_voo_no_notion':
        print("‚ÑπÔ∏è Tag 'salvar_dados_voo_no_notion' recebida. Criando tarefa ass√≠ncrona...")

        # --- MUDAN√áA AQUI: URL FIXA (HARDCODED) ---
        # SUBSTITUA PELA URL COMPLETA DO SEU SERVI√áO CLOUD RUN
        service_url = "https://vivi-agente-backend-gemini-zh35efzi7a-rj.a.run.app"
        worker_url = service_url.replace("http://", "https://", 1) # Garante HTTPS

        # Adicionamos o caminho para a rota do worker
        if not worker_url.endswith('/processar-tarefa'):
            worker_url += "/processar-tarefa"

        payload_para_tarefa = request.get_data()
        queue_path = tasks_client.queue_path(PROJECT_ID, LOCATION_ID, QUEUE_ID)

        task = {
            "http_request": {
                "http_method": tasks_v2.HttpMethod.POST,
                "url": worker_url,
                "headers": {"Content-type": "application/json"},
                "body": payload_para_tarefa,
                "oidc_token": {"service_account_email": SERVICE_ACCOUNT_EMAIL}
            }
        }

        try:
            tasks_client.create_task(parent=queue_path, task=task)
            print("‚úÖ Tarefa criada com sucesso na fila.")
            texto_resposta = "Sua solicita√ß√£o foi registrada com sucesso! Um de nossos especialistas ir√° analisar e te enviar√° a proposta em breve aqui mesmo. Obrigado! üòä"
        except Exception as e:
            logger.exception("‚ùå Falha ao criar tarefa no Cloud Tasks: %s", e)
            texto_resposta = "Consegui coletar todas as informa√ß√µes, mas tive um problema ao iniciar o registro da sua solicita√ß√£o. Nossa equipe j√° foi notificada."

        return jsonify({"fulfillment_response": {"messages": [{"text": {"text": [texto_resposta]}}]}})
    
    # Se nenhuma tag corresponder, pode adicionar um retorno padr√£o aqui
    return jsonify({"fulfillment_response": {"messages": [{"text": {"text": ["N√£o entendi o que preciso fazer."]}}]}})


# --- PORTA DE ENTRADA 2: Rota para o Trabalhador do Cloud Tasks ---
@functions_framework.http
def processar_tarefa(request):
    """
    Fun√ß√£o "TRABALHADOR": agora vai enviar uma notifica√ß√£o por WhatsApp.
    """
    # Verifica√ß√£o de seguran√ßa para garantir que a chamada veio do Cloud Tasks
    if "X-Cloud-Tasks-Target" not in request.headers or request.headers["X-Cloud-Tasks-Target"] != "processar_tarefa":
        print("‚ö†Ô∏è Chamada n√£o autorizada para o worker. Ignorando.")
        return "Chamada n√£o autorizada.", 403

    task_payload = request.get_json(silent=True)
    if not task_payload:
        print("üö® TRABALHADOR: Corpo da requisi√ß√£o da tarefa ausente ou inv√°lido.")
        return "Corpo da tarefa inv√°lido.", 400
        
    print(f"üë∑ Worker recebeu uma tarefa para enviar WhatsApp: {task_payload}")
    
    # Extrai os dados que queremos enviar na notifica√ß√£o
    parametros = task_payload.get('sessionInfo', {}).get('parameters', {})
    
    # Monta uma mensagem de notifica√ß√£o clara
    nome_cliente = parametros.get('person', {}).get('name', 'N√£o informado')
    origem = parametros.get('origem', {}).get('original', 'N/D')
    destino = parametros.get('destino', {}).get('original', 'N/D')
    
    data_ida_str = "N/D"
    data_ida_obj = parametros.get('data_ida', {})
    if isinstance(data_ida_obj, dict):
        data_ida_str = f"{int(data_ida_obj.get('day'))}/{int(data_ida_obj.get('month'))}"

    mensagem_notificacao = (
        f"üîî *Novo Lead Recebido pela Vivi!* üîî\n\n"
        f"*Cliente:* {nome_cliente}\n"
        f"*Trecho:* {origem} ‚Üí {destino}\n"
        f"*Data de Ida:* {data_ida_str}\n\n"
        f"Entrar em contato para continuar o atendimento."
    )
    
    # Configura e envia a mensagem via Twilio
    try:
        account_sid = os.getenv("TWILIO_ACCOUNT_SID")
        auth_token = os.getenv("TWILIO_AUTH_TOKEN")
        twilio_client = Client(account_sid, auth_token)

        message = twilio_client.messages.create(
            from_=os.getenv("TWILIO_WHATSAPP_FROM"),
            body=mensagem_notificacao,
            to=os.getenv("MEU_WHATSAPP_TO")
        )
        print(f"‚úÖ Notifica√ß√£o por WhatsApp enviada com sucesso! SID: {message.sid}")
        return "OK", 200 # Informa ao Cloud Tasks que a tarefa foi um sucesso

    except Exception as e:
        logger.exception("üö® Falha ao enviar notifica√ß√£o por WhatsApp via Twilio: %s", e)
        # Retorna um erro para que o Cloud Tasks possa tentar novamente (se configurado na fila)
        return "Erro ao enviar WhatsApp", 500